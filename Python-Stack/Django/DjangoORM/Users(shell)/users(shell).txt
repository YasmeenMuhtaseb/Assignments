 Create a model called User following the ERD above:

(djangoPy3Env) C:\Users\Yasmeen Muhtaseb\Desktop\python_stack\django\django_orm>django-admin startproject users
(djangoPy3Env) C:\Users\Yasmeen Muhtaseb\Desktop\python_stack\django\django_orm>cd users
(djangoPy3Env) C:\Users\Yasmeen Muhtaseb\Desktop\python_stack\django\django_orm\users>python manage.py startapp users_app

django_orm > users > users_app > models.py

from django.db import models

# Create your models here.
class Users(models.Model):
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    email_address = models.CharField(max_length=255)
    age = models.IntegerField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
___________________________________________________________________________________________________________________________

 Create and run the migration files to create the User table in your database:

(djangoPy3Env) PS C:\Users\Yasmeen Muhtaseb\Desktop\python_stack\django\django_orm\users> python manage.py makemigrations
Migrations for 'users_app':
  users_app\migrations\0001_initial.py
    - Create model Users
(djangoPy3Env) PS C:\Users\Yasmeen Muhtaseb\Desktop\python_stack\django\django_orm\users> python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions, users_app
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying sessions.0001_initial... OK
  Applying users_app.0001_initial... OK
_________________________________________________________________________________________________________________________________

Run the shell and import your User model:

(djangoPy3Env) PS C:\Users\Yasmeen Muhtaseb\Desktop\python_stack\django\django_orm\users> python manage.py shell  
Python 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 23:11:46) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from users_app.models import Users   
_________________________________________________________________________________________________________________________________

Query: Create 3 new users:
 
>>> Users.objects.create(first_name="Yasmeen", last_name="Muhtaseb", email_address="y.muhtaseb95@gmail.com", age = 25)      
<Users: Users object (1)>
>>> Users.objects.create(first_name="Rahaf", last_name="Hussary", email_address="rahaf.hussary@gmail.com", age = 25)   
<Users: Users object (2)>
>>> Users.objects.create(first_name="Shaimaa", last_name="Muhtaseb", email_address="shaima.muhtaseb@gmail.com", age = 19) 
<Users: Users object (3)>
_________________________________________________________________________________________________________________________________

Query: Retrieve all the users:

>>> Users.objects.all()
<QuerySet [<Users: Users object (1)>, <Users: Users object (2)>, <Users: Users object (3)>]>
_________________________________________________________________________________________________________________________________

Query: Retrieve the last user:

>>> Users.objects.last()     
<Users: Users object (3)>
_________________________________________________________________________________________________________________________________

Query: Retrieve the first user:

>>> Users.objects.first()     
<Users: Users object (1)>
_________________________________________________________________________________________________________________________________

Query: Change the user with id=3 so their last name is Pancakes:

>>> Users.objects.get(id=3).__dict__
{'_state': <django.db.models.base.ModelState object at 0x000002566C5C8460>, 'id': 3, 'first_name': 'Shaimaa', 'last_name': 'Muhtaseb', 'email_address': 'shaima.muhtaseb@gmail.com', 'age': 19, 'created_at': datetime.datetime(2020, 12, 12, 14, 19, 1, 545685, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 12, 12, 14, 19, 1, 545685, tzinfo=<UTC>)}
>>> user_to_update = Users.objects.get(id=3)
>>> user_to_update.last_name = "Pancakes"
>>> user_to_update.save()
>>> Users.objects.get(id=3).__dict__
{'_state': <django.db.models.base.ModelState object at 0x000002566C5C8B80>, 'id': 3, 'first_name': 'Shaimaa', 'last_name': 'Pancakes', 'email_address': 'shaima.muhtaseb@gmail.com', 'age': 19, 'created_at': datetime.datetime(2020, 12, 12, 14, 19, 1, 545685, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 12, 12, 14, 29, 29, 132176, tzinfo=<UTC>)}
_________________________________________________________________________________________________________________________________

Query: Delete the user with id=2 from the database:

>>> Users.objects.all()
<QuerySet [<Users: Users object (1)>, <Users: Users object (2)>, <Users: Users object (3)>]>
>>> user_to_delete = Users.objects.get(id=2)
>>> user_to_delete.delete()
(1, {'users_app.Users': 1})
>>> Users.objects.all()
<QuerySet [<Users: Users object (1)>, <Users: Users object (3)>]>
__________________________________________________________________________________________________________________________________

Query: Get all the users, sorted by their first name:

>>> Users.objects.all().order_by("first_name")
<QuerySet [<Users: Users object (3)>, <Users: Users object (1)>]>
__________________________________________________________________________________________________________________________________

BONUS Query: Get all the users, sorted by their first name in descending order:

>>> Users.objects.all().order_by("-first_name")
<QuerySet [<Users: Users object (1)>, <Users: Users object (3)>]>